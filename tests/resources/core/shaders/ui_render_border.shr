type:<nsstring>nsshader</nsstring>
vertex.type:<uint32>35633</uint32>
vertex.source:<nsstring>
#version 440
layout (location = 0) in vec3 position;

void main()
{
	gl_Position =  vec4(1.0, 1.0, 1.0, 1.0);
}
</nsstring>
geometry.type:<uint32>36313</uint32>
geometry.source:<nsstring>
#version 440

layout (points) in;
layout (triangle_strip, max_vertices = 16) out;

uniform vec4 border_inner_rect;
uniform vec4 border_outer_rect;
uniform mat2 rotation;
uniform vec4 viewport;
uniform vec2 pivot;

vec2 verts[16];
vec2 center;

void draw_trap()
{
	for (uint i = 0; i < 4; ++i)
	{
		gl_Position = vec4( (rotation * verts[i] + center) / viewport.zw * 2 - vec2(1.0), 1.0, 1.0);
		EmitVertex();		
	}
    EndPrimitive();	
}

vec4 bir_ndc;
vec4 bor_ndc;

void main()
{
	bir_ndc = border_inner_rect * vec4(viewport.zw,viewport.zw);
	bor_ndc = border_outer_rect * vec4(viewport.zw,viewport.zw);
	center = (bir_ndc.zw - bir_ndc.xy) * pivot + bir_ndc.xy;
	bir_ndc = bir_ndc - vec4(center, center);
	bor_ndc = bor_ndc - vec4(center, center);

	verts[0] = bor_ndc.xy;
	verts[1] = bor_ndc.xw;
	verts[2] = bir_ndc.xy;
	verts[3] = bir_ndc.xw;
	draw_trap();
	
	verts[0] = bor_ndc.xy;
	verts[1] = bir_ndc.xy;
	verts[2] = bor_ndc.zy;
	verts[3] = bir_ndc.zy;
	draw_trap();
	
	verts[0] = bir_ndc.xw;
	verts[1] = bor_ndc.xw;
	verts[2] = bir_ndc.zw;
	verts[3] = bor_ndc.zw;
	draw_trap();
	
	verts[0] = bir_ndc.zy;
	verts[1] = bir_ndc.zw;
	verts[2] = bor_ndc.zy;
	verts[3] = bor_ndc.zw;
	draw_trap();
}
</nsstring>
fragment.type:<uint32>35632</uint32>
fragment.source:<nsstring>
#version 440

layout (location = 0) out vec4 final_frag_color;
layout (location = 1) out uvec3 final_picking;

uniform vec4 frag_color_out;
uniform uvec3 entity_id;

void main()
{
	final_frag_color = frag_color_out;
	final_picking = entity_id;
}
</nsstring>
