link_libraries(nsengine)

if (UNIX)
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message("Building debug inputtest")
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glew-1.12.0/lib/${PLATFORM}/libGLEWmxd.a)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/hashlib-1.0.0/lib/${PLATFORM}/libhashlibd.a)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/soil-1.16.0/lib/${PLATFORM}/libsoild.a)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/assimp-3.1.1/lib/${PLATFORM}/libassimpd.so.3)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/devil-1.7.8/lib/${PLATFORM}/libILd.so)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glfw-3.1.1/lib/${PLATFORM}/libglfwd.so.3)
  else()
    message("Building release inputtest")
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glew-1.12.0/lib/${PLATFORM}/libGLEWmx.a)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/hashlib-1.0.0/lib/${PLATFORM}/libhashlib.a)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/soil-1.16.0/lib/${PLATFORM}/libsoil.a)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/assimp-3.1.1/lib/${PLATFORM}/libassimp.so.3)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/devil-1.7.8/lib/${PLATFORM}/libIL.so)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glfw-3.1.1/lib/${PLATFORM}/libglfw.so.3)
  endif()
  
  # link with opengl (no debug version)
  find_package(OpenGL REQUIRED)
  if(NOT OPENGL_FOUND)
    message(ERROR "Error: OpenGL not found on your system - please make sure you have it downloaded.")
  endif(NOT OPENGL_FOUND)
  link_libraries(${OPENGL_LIBRARIES})
elseif (WIN32)
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glew-1.12.0/lib/${PLATFORM}/glew32mxsd.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/hashlib-1.0.0/lib/${PLATFORM}/hashlibsd.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/soil-1.16.0/lib/${PLATFORM}/soilsd.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/assimp-3.1.1/lib/${PLATFORM}/assimpd.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/devil-1.7.8/lib/${PLATFORM}/DevILd.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glfw-3.1.1/lib/${PLATFORM}/glfwd.lib)
  else()
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glew-1.12.0/lib/${PLATFORM}/glew32mxs.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/hashlib-1.0.0/lib/${PLATFORM}/hashlibs.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/soil-1.16.0/lib/${PLATFORM}/soils.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/assimp-3.1.1/lib/${PLATFORM}/assimp.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/devil-1.7.8/lib/${PLATFORM}/DevIL.lib)
    link_libraries(${PROJECT_SOURCE_DIR}/deps/glfw-3.1.1/lib/${PLATFORM}/glfw.lib)
  endif()
  set(OPENGL_LIB_PATH "F:/Program Files (x86)/Windows Kits/8.1/Lib/winv6.3/um/${PLATFORM}")
  link_libraries(${OPENGL_LIB_PATH}/OpenGL32.lib)
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin/${PLATFORM})
add_executable(inputtest inputtest.cpp)
set_target_properties(inputtest PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})