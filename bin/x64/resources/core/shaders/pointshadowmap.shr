type:<nsstring>nspoint_shadowmap_shader</nsstring>
vertex.type:<uint32>35633</uint32>
vertex.source:<nsstring>#version 410

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex;
layout (location = 2) in vec3 norm;
layout (location = 3) in vec3 tang;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 6) in vec4 trans1;
layout (location = 7) in vec4 trans2;
layout (location = 8) in vec4 trans3;
layout (location = 9) in vec4 trans4;
layout (location = 10) in uint referenceID;

uniform sampler2D heightMap;
uniform vec2 hminmax;
uniform bool hasHeightMap;
uniform mat4 nodeTransform;
uniform mat4 boneTransforms[100];
uniform int hasBones;

mat4 transform;
vec4 worldPos;

void main()
{
	transform[0] = vec4(trans1.x, trans2.x, trans3.x, trans4.x);
	transform[1] = vec4(trans1.y, trans2.y, trans3.y, trans4.y);
	transform[2] = vec4(trans1.z, trans2.z, trans3.z, trans4.z);
	transform[3] = vec4(trans1.w, trans2.w, trans3.w, trans4.w);

	if (hasBones == 1)
	{
		mat4 boneTrans = boneTransforms[boneIDs.x] * boneWeights.x;
		boneTrans += boneTransforms[boneIDs.y] * boneWeights.y;
		boneTrans += boneTransforms[boneIDs.z] * boneWeights.z;
		boneTrans += boneTransforms[boneIDs.w] * boneWeights.w;
		worldPos = transform * boneTrans * vec4(position, 1.0);
	}
	else
		worldPos = transform * nodeTransform * vec4(position, 1.0);

	if (hasHeightMap)
	{
		float heightMult = textureLod(heightMap, tex, 0.0).r; // store height info in blue channel
		worldPos.z += heightMult*(hminmax.y - hminmax.x) + hminmax.x;
	}

	gl_Position = worldPos;
} 


</nsstring>
geometry.type:<uint32>36313</uint32>
geometry.source:<nsstring>#version 440

layout (triangles) in;
layout (triangle_strip, max_vertices = 18) out;
uniform mat4 projMat;
uniform mat4 inverseTMat;
out vec4 worldPos;

mat4 views[6];

void main()
{
	views[0][0] = vec4( 0,  0,  1,  0);
	views[0][1] = vec4( 0, -1,  0,  0);
	views[0][2] = vec4(-1,  0,  0,  0);
	views[0][3] = vec4( 0,  0,  0,  1);

	views[1][0] = vec4( 0,  0, -1,  0);
	views[1][1] = vec4( 0, -1,  0,  0);
	views[1][2] = vec4( 1,  0,  0,  0);
	views[1][3] = vec4( 0,  0,  0,  1);

	views[2][0] = vec4( 1,  0,  0,  0);
	views[2][1] = vec4( 0,  0,  1,  0);
	views[2][2] = vec4( 0,  1,  0,  0);
	views[2][3] = vec4( 0,  0,  0,  1);

	views[3][0] = vec4( 1,  0,  0,  0);
	views[3][1] = vec4( 0,  0, -1,  0);
	views[3][2] = vec4( 0, -1,  0,  0);
	views[3][3] = vec4( 0,  0,  0,  1);

	views[4][0] = vec4( 1,  0,  0,  0);
	views[4][1] = vec4( 0, -1,  0,  0);
	views[4][2] = vec4( 0,  0,  1,  0);
	views[4][3] = vec4( 0,  0,  0,  1);

	views[5][0] = vec4(-1,  0,  0,  0);
	views[5][1] = vec4( 0, -1,  0,  0);
	views[5][2] = vec4( 0,  0, -1,  0);
	views[5][3] = vec4( 0,  0,  0,  1);

	for (gl_Layer = 0; gl_Layer < 6; ++gl_Layer)
	{
		for (int vertIndex = 0; vertIndex < 3; ++vertIndex)
		{
			worldPos = gl_in[vertIndex].gl_Position;
			gl_Position = projMat * views[gl_Layer] * inverseTMat * worldPos;
			EmitVertex();
		}
		EndPrimitive();
	}
}


</nsstring>
fragment.type:<uint32>35632</uint32>
fragment.source:<nsstring>#version 440

uniform vec3 lightPos;
uniform float maxDepth;
in vec4 worldPos;

void main()
{
	gl_FragDepth = length(worldPos.xyz - lightPos) / maxDepth;
}



</nsstring>
