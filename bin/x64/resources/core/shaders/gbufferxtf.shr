type:<nsstring>nsxfb_shader</nsstring>
vertex.type:<uint32>35633</uint32>
vertex.source:<nsstring>#version 440

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex;
layout (location = 2) in vec3 norm;
layout (location = 3) in vec3 tang;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 6) in vec4 trans1;
layout (location = 7) in vec4 trans2;
layout (location = 8) in vec4 trans3;
layout (location = 9) in vec4 trans4;
layout (location = 10) in uint referenceID;

uniform mat4 nodeTransform;
mat4 transform;

out vec3 worldPos;
out vec3 texCoords;
out vec3 normal;
out vec3 tangent;

void main()
{
	transform[0] = vec4(trans1.x, trans2.x, trans3.x, trans4.x);
	transform[1] = vec4(trans1.y, trans2.y, trans3.y, trans4.y);
	transform[2] = vec4(trans1.z, trans2.z, trans3.z, trans4.z);
	transform[3] = vec4(trans1.w, trans2.w, trans3.w, trans4.w);

	worldPos = vec3((transform * nodeTransform * vec4(position, 1.0)).xyz);
	texCoords = vec3(tex, float(referenceID));
	normal = (transform  * nodeTransform * vec4(norm, 0.0)).xyz;
	tangent = (transform  * nodeTransform * vec4(tang, 0.0)).xyz;
} 


</nsstring>
geometry.type:<uint32>36313</uint32>
geometry.source:<nsstring></nsstring>
fragment.type:<uint32>35632</uint32>
fragment.source:<nsstring></nsstring>
