type:<nsstring>nsmaterial_shader</nsstring>
vertex.type:<uint32>35633</uint32>
vertex.source:<nsstring>#version 440

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex;
layout (location = 2) in vec3 norm;
layout (location = 3) in vec3 tang;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 6) in vec4 trans1;
layout (location = 7) in vec4 trans2;
layout (location = 8) in vec4 trans3;
layout (location = 9) in vec4 trans4;
layout (location = 10) in uint referenceID;

uniform sampler2D heightMap;
uniform sampler2D diffuseMap;
uniform mat4 nodeTransform;
uniform mat4 projCamMat;
uniform mat4 boneTransforms[100];
uniform bool hasBones;
uniform bool hasHeightMap;
uniform vec2 hminmax;

mat4 transform;
vec4 localPos;

out vec2 texCoords;
out vec3 normal;
out vec3 tangent;
out vec4 worldPos;
flat out uint refID;

void main()
{
	transform[0] = vec4(trans1.x, trans2.x, trans3.x, trans4.x);
	transform[1] = vec4(trans1.y, trans2.y, trans3.y, trans4.y);
	transform[2] = vec4(trans1.z, trans2.z, trans3.z, trans4.z);
	transform[3] = vec4(trans1.w, trans2.w, trans3.w, trans4.w);

	if (hasBones)
	{
		mat4 boneTrans = boneTransforms[boneIDs.x] * boneWeights.x;
		boneTrans += boneTransforms[boneIDs.y] * boneWeights.y;
		boneTrans += boneTransforms[boneIDs.z] * boneWeights.z;
		boneTrans += boneTransforms[boneIDs.w] * boneWeights.w;
		localPos = boneTrans * vec4(position, 1.0);
		normal = (transform * boneTrans * vec4(norm, 0.0)).xyz;
		tangent = (transform * boneTrans * vec4(tang, 0.0)).xyz;
	}
	else
	{
		localPos = nodeTransform * vec4(position, 1.0);
		normal = (transform  * nodeTransform * vec4(norm, 0.0)).xyz;
		tangent = (transform  * nodeTransform * vec4(tang, 0.0)).xyz;
	}

	worldPos = transform * localPos;

	if (hasHeightMap)
	{
		float heightMult = textureLod(heightMap, tex, 0.0).r; // store height info in red channel
		worldPos.z += heightMult*(hminmax.y - hminmax.x) + hminmax.x;
	}
	texCoords = tex;
	refID = referenceID;
    gl_Position = projCamMat * worldPos;
} 


</nsstring>
geometry.type:<uint32>36313</uint32>
geometry.source:<nsstring></nsstring>
fragment.type:<uint32>35632</uint32>
fragment.source:<nsstring>#version 440

in vec2 texCoords;
in vec3 normal;
in vec3 tangent;
in vec4 worldPos;
flat in uint refID;

uniform sampler2D diffuseMap;
uniform sampler2D opacityMap;
uniform sampler2D normalMap;

uniform float specPower;
uniform float specIntensity;
uniform vec3 specColor;
uniform uint entityID;
uniform uint pluginID;
uniform bool colorMode;
uniform vec4 fragColOut;
uniform bool hasDiffuseMap;
uniform bool hasNormalMap;
uniform bool hasOpacityMap;
uniform bool lightingEnabled;
uniform bool hasHeightMap;

layout (location = 0) out vec4 colorOut;
layout (location = 1) out uvec3 pickingOut;
layout (location = 2) out vec3 worldPosOut;
layout (location = 3) out vec4 normalOut;
layout (location = 4) out vec4 materialOut;

vec3 calculateNormalMap()
{
    vec3 norm = normalize(normal);
	if (!colorMode && hasNormalMap)
	{
		vec3 tang = normalize(tangent);
		tang = normalize(tang - dot(tang, norm) * norm);
		vec3 biTangent = cross(tang, norm);
		vec3 bmNormal = texture(normalMap, texCoords).xyz;
		bmNormal = 2.0 * bmNormal - vec3(1.0, 1.0, 1.0);
		vec3 nNormal;
		mat3 transBumpMap = mat3(tang, biTangent, norm);
		nNormal = transBumpMap * bmNormal;
		nNormal = normalize(nNormal);
		return nNormal;
	}
	return norm;
}

void main()
{
	vec4 difCol = fragColOut;
	if (!colorMode && hasDiffuseMap)
	{
		if (hasHeightMap)
			difCol = texture(diffuseMap, vec2(worldPos.xy)/20);
		else
			difCol = texture(diffuseMap, texCoords);
	}

	float alpha = 1.0;
	if (hasOpacityMap)
		alpha = texture(opacityMap, texCoords).a;

	//if (alpha != 1.0) // This may decrease performance
	//	discard;

	colorOut = difCol;
	pickingOut = uvec3(pluginID, entityID, refID);
	if (lightingEnabled)
	{
		worldPosOut = vec3(worldPos.xyz);
		normalOut = vec4(calculateNormalMap(),specPower);
		materialOut = vec4(specColor, specIntensity);
	}
}



</nsstring>
